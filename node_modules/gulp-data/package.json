{
  "_args": [
    [
      {
        "raw": "gulp-data@^1.2.0",
        "scope": null,
        "escapedName": "gulp-data",
        "name": "gulp-data",
        "rawSpec": "^1.2.0",
        "spec": ">=1.2.0 <2.0.0",
        "type": "range"
      },
      "/Volumes/Data/Kwerri/projecten/zoedewinter.com"
    ]
  ],
  "_from": "gulp-data@>=1.2.0 <2.0.0",
  "_id": "gulp-data@1.2.1",
  "_inCache": true,
  "_location": "/gulp-data",
  "_nodeVersion": "4.0.0",
  "_npmUser": {
    "name": "colynb",
    "email": "colyn.brown@gmail.com"
  },
  "_npmVersion": "2.14.4",
  "_phantomChildren": {},
  "_requested": {
    "raw": "gulp-data@^1.2.0",
    "scope": null,
    "escapedName": "gulp-data",
    "name": "gulp-data",
    "rawSpec": "^1.2.0",
    "spec": ">=1.2.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/gulp-data/-/gulp-data-1.2.1.tgz",
  "_shasum": "a94b54de7d4f3b8ea1f40ef859749c24578cf12b",
  "_shrinkwrap": null,
  "_spec": "gulp-data@^1.2.0",
  "_where": "/Volumes/Data/Kwerri/projecten/zoedewinter.com",
  "author": {
    "name": "Colyn Brown",
    "email": "colyn.brown@gmail.com",
    "url": "https://github.com/colynb"
  },
  "bugs": {
    "url": "https://github.com/colynb/gulp-data/issues"
  },
  "contributors": [
    {
      "name": "Izaak Schroeder",
      "email": "izaak.schroeder@gmail.com",
      "url": "http://www.github.com/izaakschroeder"
    }
  ],
  "dependencies": {
    "gulp-util": "^3.0.7",
    "through2": "^2.0.0",
    "util-extend": "^1.0.1"
  },
  "description": "Generate a data object from a variety of sources: json, front-matter, databases, promises, anything... and set it to the file object for other plugins to consume.",
  "devDependencies": {
    "coveralls": "*",
    "istanbul": "*",
    "jshint": "^2.6.0",
    "mocha": "*",
    "mocha-lcov-reporter": "*",
    "q": "^1.0.1",
    "should": "^7.1.1",
    "vinyl": "^1.1.0"
  },
  "directories": {},
  "dist": {
    "shasum": "a94b54de7d4f3b8ea1f40ef859749c24578cf12b",
    "tarball": "https://registry.npmjs.org/gulp-data/-/gulp-data-1.2.1.tgz"
  },
  "engines": {
    "node": ">=0.9.0",
    "npm": ">=1.2.10"
  },
  "files": [
    "index.js"
  ],
  "gitHead": "f6e8f176b463de4e979bcb9578024caed96c5273",
  "homepage": "https://github.com/colynb/gulp-data#readme",
  "keywords": [
    "gulpplugin",
    "data",
    "json",
    "gulp"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "colynb",
      "email": "colyn.brown@gmail.com"
    }
  ],
  "name": "gulp-data",
  "optionalDependencies": {},
  "readme": "# [gulp](https://github.com/wearefractal/gulp)-data\n\n[![Build Status](https://travis-ci.org/colynb/gulp-data.svg?branch=master)](https://travis-ci.org/colynb/gulp-data)\n[![Dependencies](https://david-dm.org/colynb/gulp-data.svg)](https://david-dm.org/colynb/gulp-data)\n\n[![NPM](https://nodei.co/npm/gulp-data.svg?stars&downloads)](https://www.npmjs.com/package/gulp-data)\n\n[Learn more about gulp.js, the streaming build system](http://gulpjs.com)\n\n## Introduction\n\nGulp-data proposes a common API for attaching data to the file object for other plugins to consume. With gulp-data you can generate a data object from a variety of sources: json, front-matter, database, anything... and set it to the file object for other plugins to consume.\n\nMany plugins, such as ```gulp-swig``` or ```gulp-jade``` allow for JSON data to be passed via their respective options parameter. However, frequently what you want is the ability to dynamically set the data based off the file name or some other attribute of the file. Without using another plugin, this becomes problematic - as the number of ways of getting at data (via JSON files, front-matter, data bases, promises, etc) increases, the more plugin authors have to update their APIs to support these sources. The ```gulp-data``` plugin aims to standardize a method that is generic enough to encapsulate these data sources into a single ```data``` property attached to the file object. It's really up to you as to where your data comes from, a JSON file, from a front-matter section of the file, or even a database, ```gulp-data``` doesn't really care.\n\nHowever, for this to be effective, I'm asking plugin devs that receive data through the options parameter to make a small change to additionally accept this data through the ```file.data``` property. (See below)\n\n## Important Update\n\nThanks to the help of [@izaakschroeder](http://www.github.com/izaakschroeder) we've reached version 1.0 (now 1.0.1). Some important changes have been added, primarily support for promises, and error handling. The examples below have been updated to reflect these changes.\n\n## Usage\n\nFirst, install `gulp-data` as a development dependency:\n\n```shell\nnpm install --save-dev gulp-data\n```\n\nThen, add it to your `gulpfile.js`:\n\n```javascript\nvar gulp = require('gulp');\nvar swig = require('gulp-swig');\nvar data = require('gulp-data');\nvar fm = require('front-matter');\nvar path = require('path');\nvar MongoClient = require('mongodb').MongoClient;\n\n/*\n  Get data via JSON file, keyed on filename.\n*/\ngulp.task('json-test', function() {\n  return gulp.src('./examples/test1.html')\n    .pipe(data(function(file) {\n      return require('./examples/' + path.basename(file.path) + '.json');\n    }))\n    .pipe(swig())\n    .pipe(gulp.dest('build'));\n});\n\n/*\n  Get data via front matter\n*/\ngulp.task('fm-test', function() {\n  return gulp.src('./examples/test2.html')\n    .pipe(data(function(file) {\n      var content = fm(String(file.contents));\n      file.contents = new Buffer(content.body);\n      return content.attributes;\n    }))\n    .pipe(swig())\n    .pipe(gulp.dest('build'));\n});\n\n/*\n  Get data via database, keyed on filename.\n*/\ngulp.task('db-test', function() {\n  return gulp.src('./examples/test3.html')\n    .pipe(data(function(file, cb) {\n      MongoClient.connect('mongodb://127.0.0.1:27017/gulp-data-test', function(err, db) {\n        if(err) return cb(err);\n        cb(undefined, db.collection('file-data-test').findOne({filename: path.basename(file.path)}));\n      });\n    }))\n    .pipe(swig())\n    .pipe(gulp.dest('build'));\n});\n\n```\n\n## API\n\n### data(dataFunction)\n\n#### dataFunction\nType: `Function`\n\nDefine a function that returns a data object via a callback function. Could return JSON from a file, or an object returned from a database.\n\nYou can return the data object:\n```javascript\ndata(function(file) {\n  return { 'foo': file.path }\n})\n```\n\nYou can return a promise:\n```javascript\ndata(function(file) {\n  return promise;\n})\n```\n\nYou can feed a result object through the callback:\n```javascript\ndata(function(file, callback) {\n  return callback(undefined, { 'foo': 'bar' });\n})\n```\n\nYou can feed a promise object through the callback:\n```javascript\ndata(function(file, callback) {\n  return callback(undefined, promise);\n})\n```\n\nYou can throw an error:\n```javascript\ndata(function(file) {\n  throw new Error('my-error');\n})\n```\n\nYou can raise an error via the callback:\n```javascript\ndata(function(file, callback) {\n  return callback('error');\n})\n```\n\n## Note to gulp plugin authors\n\nIf your plugin needs a data object, one that normally gets passed in via your options parameter, I'm asking if you could please update the plugin to accept data from the ```file.data``` property. Here's how you can do it:\n\n```gulp-swig``` usually accepts data via its ```options.data``` parameter, but with a small change, it checks to see if there's a ```file.data``` property and if so, merges it into the data object.\n\n```\nvar data = opts.data || {};\nif (file.data) {\n  data = _.extend(file.data, data);\n  // or just data = file.data if you don't care to merge. Up to you.\n}\n```\n\n## Author\n\n- [@colynb](https://github.com/colynb)\n\n## Contributors\n\n- [@izaakschroeder](https://github.com/izaakschroeder)\n- [@stevelacy](https://github.com/stevelacy)\n- [@shinnn](https://github.com/shinnn)\n- [@phillipgreenii](https://github.com/phillipgreenii)\n\n\n\n## License\n\n[MIT License](http://en.wikipedia.org/wiki/MIT_License)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/colynb/gulp-data.git"
  },
  "scripts": {
    "pretest": "jshint *.js test/*.js",
    "test": "istanbul test _mocha --report html -- test/*.js"
  },
  "version": "1.2.1"
}
